#+title: TinyAgda project notes
#+LINK: bib file:readings.bib::%s
#+LINK: notes file:project.org::#%s
* ABOUT THIS FILE						       :meta:
  - This file contains notes and plans for the TinyAgda project.  Right now it
    is focused on issues of typechecker and compiler implementation, especially
    efficient term representations and open computation strategies.
  - It should basically work as-is on a vanilla emacs 23+, but you might want
    to set up an org-mode keybinding for `reftex-citation' since the usual
    binding for it is shadowed in org-mode.  It's useful enough to be worth
    its own binding.
  - The notes in [[Reading list]] are those that apply fairly directly to
    particular articles and the issues they raise.  Topic-focused discussion
    that cites several articles should go under other headings.
* Agenda
** TODO Get a buildable TinyAgda package that can fail tests
** Set up repo for the TinyAgda source proper
*** darcs -- the better to sync the test suite with
*** as of <2013-05-24 Fri> blocked on waiting for code.haskell.org account
** TODO core calculus to describe 'what Agda is'
* What to implement and how
** Term representation
*** <2013-05-16 Thu> [[mid:519535FB.3040007@cse.gu.se]["Re: Agda fork"]]				    :rec@NAD:
**** recommended 4 papers:
***** [[notes:Shao1998][Shao1998]] "Implementing Typed Intermediate Languages"
***** [[notes:Liang2004][Liang2004]] "Choices in Representation and Reduction Strategies..."
***** [[notes:Gacek2007][Gacek2007]] "A Simplified Suspension Calculus and its Relationship..."
***** [[notes:Dowek2000][Dowek2000]] "Higher Order Unification via Explicit Substitutions"
**** "Combining the techniques described in (at least) the first
      three papers above seems promising."
*** Sharing: closure-based, graph-based, heap-based?
**** Closure-based
***** PRO: representation is pure
****** does not need to live in IO
****** no worries about ephemeral data or conflicting side effects
****** term rewriting formalism, not graph or forest rewriting
***** PRO: can use explicit substitutions as closures
****** lots of existing work, including application
****** handles metavariables naturally
****** combine multiple walks, including reduction and inst. ([[notes:Abel2010][Abel2010-notes]])
***** CON: poor handling of sharing outside the scope of a single term
****** even frozen metas are quantified over at least a mutual block
****** thanks to syntax sugar this can be even bigger than it looks
***** CON: complete laziness is not well-formalized in this context
****** but plain laziness is ([[notes:Maraist1998][Maraist1998-notes]])
* Reading list
** HOW TO ADD NOTES HERE 					       :meta:
   1) If the article is already listed here, skip to step 4.
   2) Move to the heading you want the article to appear *before*.
   3) M-x reftex-citation, choose format 'h', find the article in the selector.
   4) Insert a new heading for your notes (Alt-Enter on the previous line, then
      Alt-Right to move it in) at the end of the entry or under a note you're
      replying to or expanding on.
   5) Write a single-line summary and add appropriate tags with C-c C-q (for
      most entries 'talk@YourHandle' is appropriate).
   6) If you need anything beyond the summary, write it indented under the
      summary line.
      - You can also make subheads if you like.
** [[bib:Shao1998][Implementing Typed Intermediate Languages]]
   - Shao, League & Monnier
   - ICFP 1998
:PROPERTIES:
:Custom_ID: Shao1998
:END:
*** <2013-05-16 Thu> [[mid:519535FB.3040007@cse.gu.se]["Re: Agda fork"]]				    :rec@NAD:
    Describes an implementation of a compiler with an intermediate
    language using F_ω-style types. Techniques used: hash-consing,
    memoisation, explicit substitutions (suspensions à la Nadathur and
    Wilson), de Bruijn indices, and something resembling the locally
    nameless variable representation.
** [[bib:Liang2004][Choices in Representation and Reduction Strategies for Lambda Terms in Intensional Contexts]]
   - Liang, Nadathur & Qi
   - Journal of Automated Reasoning, 2004
:PROPERTIES:
:Custom_ID: Liang2004
:END:
*** <2013-05-16 Thu> [[mid:519535FB.3040007@cse.gu.se]["Re: Agda fork"]]				    :rec@NAD:
    Discusses various ways of implementing λProlog. Documents lots of
    experiments. The following seems like a good combination of choices:

    - Substitution implemented non-strictly, using a certain form of
      explicit substitutions (suspensions).

    - Reduction implemented non-strictly.

    - de Bruijn indices.

    - Do not keep track of which terms are closed.
** [[bib:Gacek2007][A Simplified Suspension Calculus and its Relationship to Other Explicit Substitution Calculi]]
   - Gacek & Nadathur
   - Technical report, 2007
:PROPERTIES:
:Custom_ID: Gacek2007
:END:
*** <2013-05-16 Thu> [[mid:519535FB.3040007@cse.gu.se]["Re: Agda fork"]]				    :rec@NAD:
    Discusses a variant of the suspension calculus used in the previous
    paper [[notes:Liang2004][(Liang2004)]]. Includes a detailed comparison with the λσ-calculus.
    The calculus is claimed to support the unification algorithm described
    in the next paper [[notes:Dowek2000][(Dowek2000)]].
** [[bib:Dowek2000][Higher Order Unification via Explicit Substitutions]]
   - Dowek, Hardin & Kirchner
   - Information and Computation, 2000
:PROPERTIES:
:Custom_ID: Dowek2000
:END:
*** <2013-05-16 Thu> [[mid:519535FB.3040007@cse.gu.se]["Re: Agda fork"]]				    :rec@NAD:
    Reduces higher-order unification to first-order unification. I'm not
    sure if this leads to performance improvements.
*** Better than it sounds 					 :talk@xplat:
    This is a good example of a fantastic result getting buried under a
    blah abstract.  The original abstract makes this sound like an
    uninsightful trick for reusing algorithms.  But if you actually
    understand it, it'll change the way you look at higher-order unification
    forever.  My fantasy abstract:

      The literature on higher-order unification has long been plagued by
      a persistent confusion between the object variables of λ-calculus
      terms and the metavariables of equational unification.  By separating
      these two kinds of variables into two syntactic classes and treating
      each appropriately, tricky 'higher-order unification' problems
      may be treated as much tamer instances of 'first-order unification over
      a higher-order equational theory'.

      Using a simple and reversible translation of the λ-calculus into the
      λσ-calculus, a calculus of explicit substitutions which already
      contains appropriate representations and simplification rules for
      terms containing metavariables, we present a narrowing calculus to
      efficiently solve higher-order unification problems using only
      well-known first-order optimization techniques.  We show faithfulness
      and adequacy of our translation and demonstrate that our narrowing
      calculus can simulate the specialized pre-unification algorithm of
      Huet.  We also show a more efficient strategy for producing the same
      solutions using intermediate steps which can only be represented due
      to the use of explicit substitutions in the term representation.
** [[bib:Abel2010][Explicit Substitutions for Contextual Type Theory]]
   - Andreas Abel & Brigitte Pientka
   - EPTCS, 2010
:PROPERTIES:
:Custom_ID: Abel2010
:END:
** [[bib:Maraist1998][The Call-by-Need Lambda Calculus]]
   - Maraist, Odersky & Wadler
   - JFP, 1998
:PROPERTIES:
:Custom_ID: Maraist1998
:END:
* SECRET EMACS SETTINGS					      :administrivia:
# Local Variables:
# eval: (reftex-mode)
# reftex-default-bibliography: ("readings.bib")
# reftex-cite-punctuation: (", " " & " " et al.")
# reftex-cite-format: ((?b . "[[bib:%l][%l-bib]]") (?n . "[[notes:%l][%l]]")
#   (?p . "[[papers:%l][%l-paper]]") (?t . "%t")
#   (?h . "** [[bib:%l][%t]]\n   - %a\n   - %j, %b %s, %y\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n"))
# End:
